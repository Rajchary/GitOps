
name: Planning and lint checking for PR

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    
jobs:
  # Plan_Configuration:
  #   name: "Plan Terraform Configuration"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: Terraform
  #   steps:
      
  #     - name: checkout Repository code
  #       uses: actions/checkout@v3
  #       with:
  #         ref: feature
     
  #     - name: Print MetaData
  #       run: |
  #         echo "This event was triggered by the user ${{ github.actor }}"
  #         echo "The triggered event was ${{ github.event_name }}"
  #         echo "The ref is ${{ github.ref }} "

  #     - name: Config Terraform plugin cache
  #       run: |
  #         echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
  #         mkdir --parents ~/.terraform.d/plugin-cache

  #     - name: Cache Terraform
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.terraform.d/plugin-cache
  #         key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
  #         restore-keys: |
  #           ${{ runner.os }}-terraform-

  #     - name: HashiCorp - Setup Terraform
  #       uses: hashicorp/setup-terraform@v2.0.3
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
  #     - name: Properly format the code
  #       id: fmt
  #       run: terraform fmt -recursive
        
  #     - name: Init the terraform
  #       id: init
  #       run: terraform init
        
  #     - name: Plan the Terraform configuration
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan
  #       continue-on-error: true

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  Webserver_Configure_Test:
    runs-on: ubuntu-latest
    # needs: [Plan_Configuration]
    environment: AWS
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: feature
      - name: write inventory to file
        run: |
          echo ${{ secrets.INVENTORY }} | base64 -d > inventory.yml
          
          cat inventory.yml
          eval `ssh-agent -s`
          mkdir -p /home/runner/.ssh/
          echo ${{ secrets.PRIVATE_KEY }} | base64 -d > /home/runner/.ssh/privateKey
          sudo chmod 700 /home/runner/.ssh/privateKey
          ssh-keyscan -t rsa,dsa,ecdsa,ed25519 ${{secrets.KNOWN_HOSTS}} >> /home/runner/.ssh/known_hosts
          sudo apt update -y
          service ssh status
        # sudo apt install software-properties-common
        # sudo add-apt-repository --yes --update ppa:ansible/ansible
        # sudo apt install ansible
      # - name: Set up Python 3.9
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.9
      #     cache: 'pip'

      # - name: cache pip
      #   id: cache_pip
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      # - name: Install dependencies Including Ansible
      #   if: steps.cache_pip.outputs.cache-hit != 'true'
      #   run: |
      #     python -m pip install --upgrade pip
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure Apache on webservers
        run: |
          export ANSIBLE_HOST_KEY_CHECKING=False;
          ansible webservers --list-hosts -i inventory
          ssh -i privateKey ec2-user@50.19.172.39
          ansible -i inventory --private-key privateKey -m ping all -vvv
        ##ansible-playbook -i inventory --private-key privateKey.pem ansible/webserver.yml
        #echo -e "[defaults]\nhost_key_checking = False\ninventory=inventory\nremote-user 
        #= ec2-user\nprivate_key_file = privateKey" > ansible.cfg
        #export ANSIBLE_HOST_KEY_CHECKING=False;
  # validate_ansible:
  #   runs-on: ubuntu-latest
  #   needs: [Plan_Configuration]
  #   name: "Ansible lint checking"
  #   steps:

  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         ref: feature
      
  #     - name: Run ansible-lint
  #       uses: ansible-community/ansible-lint-action@v6.0.2
  #       with:
  #         args: "ansible"
